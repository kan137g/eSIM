plugins {
    id 'com.android.library'
    id 'maven-publish'
}

android {
    compileSdk 32

    defaultConfig {
        minSdk 24
        targetSdk 32

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
def grpcVersion = '1.64.0'
dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.aar'])

    implementation 'com.squareup.okhttp3:okhttp:3.14.8'
    implementation "io.grpc:grpc-okhttp:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf-lite:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation 'org.apache.tomcat:annotations-api:6.0.53'

    implementation 'com.google.guava:guava:33.2.1-jre'
    implementation 'com.squareup.okhttp3:okhttp:3.14.8'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.14.8'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.0.2'
    implementation 'io.reactivex:rxjava:1.1.1'

    implementation "androidx.core:core-ktx:1.3.1"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7"
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

//    implementation 'com.github.kan137g:eSIM:1.0.7.1' // 使用标签或分支名替代yourtag

}

publishing {
    // 配置maven 仓库
    repositories { RepositoryHandler handler->
        handler.mavenLocal()  // 发布到默认的 本地maven 仓库 ，路径： USER_HOME/.m2/repository/


        //带有aar和pom等打包文件的输出目录，project.projectDir.parent：表示输出到当前项目的根目录
//        project.projectDir.parent

        // 仓库用户名密码
//         handler.maven { MavenArtifactRepository mavenArtifactRepository ->
//             // maven 仓库地址
//             url 'https://github.com/kan137g/eSIM/'
//             // 访问仓库的 账号和密码
//             credentials {
//                 username = "kan137g"
//                 password = "123456"
//             }
//         }


    }
    // 配置发布产物
    publications {PublicationContainer publication->
        // 名称可以随便定义，这里定义成 maven，是因为我的 aar 包是发布到 maven 仓库的，所以这里为了见名知义，定义成了 maven

//        debug(MavenPublication) {
//
//            // 依赖 bundleReleaseAar 任务，并上传其产出的aar
//            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }// 方式一：生成aar包
////             artifact "$buildDir/outputs/aar/${project.name}-release.aar" // 方式二：指定生成的aar路径
//            //组Id，即远程依赖库的包名
//            groupId = "com.akq.sdk"
//            //远程依赖库的库名
//            artifactId = "eSIM"
//            //版本号
//            version = "1.0.0"
//        }
//
//        release(MavenPublication) {
//
//            // 依赖 bundleReleaseAar 任务，并上传其产出的aar
//            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }  // 方式一：生成aar包
////             artifact "$buildDir/outputs/aar/${project.name}-release.aar" // 方式二：指定生成的aar路径
//            //组Id，即远程依赖库的包名
//            groupId = "com.akq.sdk"
//            //远程依赖库的库名
//            artifactId = "eSIM"
//            //版本号
//            version = "1.0.0"
//        }
        // 任务名称：maven
        maven(MavenPublication) {// 容器可配置的信息 MavenPublication

            // 依赖 bundleReleaseAar 任务，并上传其产出的aar
//            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }// 方式一：生成aar包
            artifact ".\\app\\libs\\droidlib-1.0.7.1.aar" // 方式二：指定生成的aar路径
            //组Id，即远程依赖库的包名
            groupId = "com.akq.sdk"
            //远程依赖库的库名
            artifactId = "eSIM"
            //版本号
            version = "1.0.7.1"

            // pom文件中声明依赖，从而传递到使用方
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    // 避免出现空节点或 artifactId=unspecified 的节点
                    if (it.group != null && (it.name != null && "unspecified" != it.name) && it.version != null) {
                        println "dependency=${it.toString()}"
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'implementation')
                    }
                }
            }


        }
    }

}


